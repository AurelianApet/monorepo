{
  "language": "Solidity",
  "sources": {
    "contracts/CRTVOtoken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract CRTVOtoken is ERC20 {\r\n    \r\n    constructor() ERC20(\"Creative Organization Token\", \"CRTVO\") { \r\n        _mint(msg.sender, 200 * 10^7 );\r\n    }\r\n\r\n    function burn(uint _amount) external returns(bool){\r\n        _burn(msg.sender, _amount);\r\n        return true;\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The defaut value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract MockToken is ERC20 {\r\n    constructor(address addr1, address addr2, address addr3, address addr4, address addr5, address addr6, address brand) ERC20(\"Mock Token\", \"MOCK\"){\r\n        _mint(addr1, 10000 * (10 ** 18));\r\n        _mint(addr2, 10000  * (10 ** 18));\r\n        _mint(addr3, 10000  * (10 ** 18));\r\n        _mint(addr4, 10000 * (10 ** 18));\r\n        _mint(addr5, 10000  * (10 ** 18));\r\n        _mint(addr6, 10000  * (10 ** 18));\r\n        _mint(brand, 100000  * (10 ** 18));\r\n        _mint(brand, 1000  * (10 ** 17)); // Mint brand 0.1 to act as the link token payment\r\n    }\r\n}"
    },
    "contracts/mockCRTVO.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract mockCRTV is ERC20 {\r\n    \r\n    constructor() ERC20(\"MOCK Creative Organization Token\", \"mCRTV\") {}\r\n\r\n    function mintMeTokens(uint _amount) external returns(bool){\r\n        _mint(msg.sender, _amount);\r\n        return true;\r\n    }\r\n\r\n    function burn(uint _amount) external returns(bool){\r\n        _burn(msg.sender, _amount);\r\n        return true;\r\n    }\r\n}"
    },
    "contracts/Storage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n/**\r\n * @title Storage\r\n * @dev Store & retrieve value in a variable\r\n */\r\ncontract Storage is Ownable {\r\n\r\n    uint256 number;\r\n\r\n    /**\r\n     * @dev Store value in variable\r\n     * @param num value to store\r\n     */\r\n    function store(uint256 num) public onlyOwner {\r\n        require(num > 0, \"Num must be greater than 0!\");\r\n        number = num;\r\n    }\r\n\r\n    /**\r\n     * @dev Return value \r\n     * @return value of 'number'\r\n     */\r\n    function retrieve() public view returns (uint256){\r\n        return number;\r\n    }\r\n}"
    },
    "contracts/PoolFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport {Pool} from \"./Pool.sol\";\r\n\r\ninterface iTwitterVerify {\r\n    function getVerification(address _user) external returns (bool); //TODO why does this need memory?\r\n\r\n    function getTwitterHandle(address _address)\r\n        external\r\n        returns (string memory);\r\n}\r\n\r\ninterface linkToken {\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface iRNG {\r\n    function addToWhitelist(address _address) external;\r\n}\r\n\r\ncontract PoolFactory is Ownable {\r\n    bool public allowPoolCreation;\r\n    mapping(uint256 => address) public poolList;\r\n    uint256 public poolCount;\r\n    address public TWITTER_VERIFY_ADDRESS;\r\n    iTwitterVerify private twitterVerify;\r\n    iRNG private rng;\r\n    linkToken private link;\r\n    address public LINK_CONTRACT_ADDRESS;\r\n\r\n    /**\r\n    * @dev emitted when a pool is created\r\n    * @param Pool the address of the pool\r\n    * @param PoolOwner the address of the pool owner\r\n    * @param SubmissionEndTime unix timestamp for when the submission period is over\r\n    * @param FanVotingEndTime unix timestamp for when the fan voting period is over\r\n    * @param BrandVotingEndTime unix timestamp for when the brand voting period is over\r\n    * @param CampaignEndtime unix timestamp for when the campaign is over\r\n    * @param PoolId the id this pool is stored under in poolList\r\n    **/\r\n    event PoolCreated(\r\n        address Pool,\r\n        address PoolOwner,\r\n        uint256 SubmissionEndTime,\r\n        uint256 FanVotingEndTime,\r\n        uint256 BrandVotingEndTime,\r\n        uint256 CampaignEndtime,\r\n        uint256 PoolId\r\n    );\r\n\r\n    constructor(\r\n        address _twitterVerifyAddress,\r\n        address linkTokenAddress,\r\n        address rngAddress\r\n    ) {\r\n        TWITTER_VERIFY_ADDRESS = _twitterVerifyAddress;\r\n        twitterVerify = iTwitterVerify(TWITTER_VERIFY_ADDRESS);\r\n        rng = iRNG(rngAddress);\r\n        LINK_CONTRACT_ADDRESS = linkTokenAddress;\r\n        link = linkToken(LINK_CONTRACT_ADDRESS);\r\n    }\r\n\r\n    function setTwitterVerifyAddress(address _address) external onlyOwner {\r\n        TWITTER_VERIFY_ADDRESS = _address;\r\n        twitterVerify = iTwitterVerify(TWITTER_VERIFY_ADDRESS);\r\n    }\r\n\r\n    function changePoolCreationBool(bool _bool) external onlyOwner {\r\n        allowPoolCreation = _bool;\r\n    }\r\n\r\n    function getPoolAddress(uint256 _index) external view returns (address) {\r\n        return poolList[_index];\r\n    }\r\n\r\n    function getPoolCount() external view returns (uint256) {\r\n        return poolCount;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows caller to create a custom brand pool, as long as they are verified, and have approved the contract to spend 0.1 Link \r\n    * TODO add require checks to make sure inputs are logical\r\n    **/\r\n    function createPool(\r\n        string memory _poolName,\r\n        uint256 _capital,\r\n        address _capitalAddress,\r\n        address _nftAddress,\r\n        uint256 _campaignLength,\r\n        uint256 _votingLength,\r\n        uint256 _decisionLength,\r\n        uint256 _submissionLength\r\n    ) external {\r\n        require(allowPoolCreation, \"Pool creation is currently not allowed!\");\r\n        require(\r\n            twitterVerify.getVerification(msg.sender),\r\n            \"Caller address is not verified with Twitter!\"\r\n        );\r\n        require(\r\n            link.transferFrom(msg.sender, address(rng), 1 * (10**17)),\r\n            \"Link transferFrom failed!\"\r\n        );\r\n        string memory brandName = twitterVerify.getTwitterHandle(msg.sender);\r\n        Pool pool =\r\n            new Pool(\r\n                _poolName,\r\n                brandName,\r\n                _capital,\r\n                _capitalAddress,\r\n                _nftAddress,\r\n                msg.sender,\r\n                address(rng),\r\n                _campaignLength,\r\n                _votingLength,\r\n                _decisionLength,\r\n                _submissionLength\r\n            );\r\n        uint submissionEndTime;\r\n        uint fanVotingEndTime;\r\n        uint brandVotingEndTime;\r\n        uint campaignEndTime;\r\n        uint256 currentTime = block.timestamp;\r\n        submissionEndTime = currentTime + _submissionLength;\r\n        fanVotingEndTime = submissionEndTime + _votingLength;\r\n        brandVotingEndTime = fanVotingEndTime + _decisionLength;\r\n        campaignEndTime = currentTime + _campaignLength;\r\n        emit PoolCreated(\r\n            address(pool),\r\n            msg.sender,\r\n            submissionEndTime,\r\n            fanVotingEndTime,\r\n            brandVotingEndTime,\r\n            campaignEndTime,\r\n            poolCount\r\n        );\r\n        poolList[poolCount] = address(pool);\r\n        poolCount++;\r\n        rng.addToWhitelist(address(pool));\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\n      *\n      * Requirements:\n      *\n      * - `from` cannot be the zero address.\n      * - `to` cannot be the zero address.\n      * - `tokenId` token must exist and be owned by `from`.\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n      *\n      * Emits a {Transfer} event.\n      */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n"
    },
    "contracts/Pool.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\ninterface iRandomNumberGenerator {\r\n    function getRandomNumber(uint256 userProvidedSeed)\r\n        external\r\n        returns (bytes32 requestId);\r\n\r\n    function seeRandomNumber() external returns (uint256);\r\n}\r\n\r\n//TODO instead of distributing rewards, there should be a new settling contract created where the artist and brand can have a back and forth over the design of the final NFT\r\n//This contract would pay out the rewards\r\n//TODO add support for another ERC20 token that can be used as a prize pool for first second and third submissions.\r\ncontract Pool {\r\n    address public poolOwner;\r\n    IERC20 private token; //The input token for the pool campaign usually CRTV\r\n    IERC721 private nft;\r\n    iRandomNumberGenerator private rng;\r\n    string public poolName; //Brand can call the pool whatever they want IE \"Campaign to design the next Coca Cola Bear NFT\"\r\n    string public brandName; //Pulled from Twitter handle is not changeable\r\n    uint256 public funds; //Capital Pool owner deposits to start pool!\r\n    uint256 public submissionEndTime;\r\n    uint256 public fanVotingEndTime;\r\n    uint256 public brandVotingEndTime;\r\n    uint256 public campaignEndTime;\r\n    bool public topTenFound;\r\n    uint256[10] public topTen;\r\n    uint256[10] public topTenAmount;\r\n    uint256[] finalists;\r\n    uint256[] finalistsAmounts;\r\n    uint256 winningSubmission; // Index of the winning submission\r\n    uint256 userDeposit; // Amount of funds required to make a submission and vote\r\n    bool winnerSelected;\r\n    uint256 searchIndex; //stores the last index that was cheked for top ten calcualtion\r\n    bool checkedForTies;\r\n    uint256 finalistsCount;\r\n    bool public backedByFunds;\r\n\r\n    struct User {\r\n        address user;\r\n        uint256 amount;\r\n    }\r\n\r\n    struct submission {\r\n        uint256[] nftList;\r\n        mapping(address => uint256) userIndex;\r\n        User[] users;\r\n        uint256 userCount;\r\n    }\r\n\r\n    mapping(uint256 => submission) public submissions;\r\n    uint256 submissionCount = 1;\r\n\r\n    /**\r\n     * @dev emitted when a pool is backed with enough campaign funds\r\n     * @param PoolAddress address of the pool\r\n     * @param PoolName name of the pool\r\n     * @param BrandName name of the brand running the campaign\r\n     * @param BackedByFunds bool showing whether the pool is backed by funds for not.\r\n     **/\r\n    event PoolBacked(\r\n        address PoolAddress,\r\n        string PoolName,\r\n        string BrandName,\r\n        bool BackedByFunds\r\n    );\r\n\r\n    /**\r\n     * @dev emitted when a pool owner changes the pool name\r\n     * @param PoolAddress address of the pool\r\n     * @param PoolName name of the pool\r\n     * @param BrandName name of the brand running the campaign\r\n     **/\r\n    event PoolNameChanged(\r\n        address PoolAddress,\r\n        string PoolName,\r\n        string BrandName\r\n    );\r\n\r\n    /**\r\n     * @dev emitted when an artist created a submission\r\n     * @param PoolAddress address of the pool\r\n     * @param PoolName name of the pool\r\n     * @param BrandName name of the brand running the campaign\r\n     * @param SubmissionNumber the number assigned to this submission, when emitted this also represents total submission count\r\n     * @param ArtistAddress the address of the artist who created the submission\r\n     * @param NFTsInSubmission an array of uints that hold the token ids of the NFTs in the submission\r\n     **/\r\n    event SubmissionCreated(\r\n        address PoolAddress,\r\n        string PoolName,\r\n        string BrandName,\r\n        uint256 SubmissionNumber,\r\n        address ArtistAddress,\r\n        uint256[3] NFTsInSubmission\r\n    );\r\n\r\n    /**\r\n     * @dev emitted when a fan votes on a submission\r\n     * @param PoolAddress address of the pool\r\n     * @param PoolName name of the pool\r\n     * @param BrandName name of the brand running the campaign\r\n     * @param SubmissionNumber the submission number the fan voted for\r\n     * @param Voter the address of the fan that made the vote\r\n     * @param NewVoteCount the new total vote count for that submission\r\n     **/\r\n    event VoteSubmitted(\r\n        address PoolAddress,\r\n        string PoolName,\r\n        string BrandName,\r\n        uint256 SubmissionNumber,\r\n        address Voter,\r\n        uint256 NewVoteCount\r\n    );\r\n\r\n    /**\r\n     * @dev emitted when the Top Ten list changes from a fan vote\r\n     * @param PoolAddress address of the pool\r\n     * @param PoolName name of the pool\r\n     * @param BrandName name of the brand running the campaign\r\n     * @param TopTen the top ten submissions, an array of indexes, so if submission 1 is in it, 1 would be in the top ten\r\n     **/\r\n    event NewTopTen(\r\n        address PoolAddress,\r\n        string PoolName,\r\n        string BrandName,\r\n        uint256[10] TopTen\r\n        );\r\n\r\n    /**\r\n     * @dev emitted when finalists list has been created\r\n     * @param PoolAddress address of the pool\r\n     * @param PoolName name of the pool\r\n     * @param BrandName name of the brand running the campaign\r\n     * @param Finalists an array of of indexing corresponding to the submission numbers that are finalists\r\n     **/\r\n    event SeeFinalists(\r\n        address PoolAddress,\r\n        string PoolName,\r\n        string BrandName,\r\n        uint256[] Finalists\r\n        );\r\n\r\n        /**\r\n     * @dev emitted when the winner is chosen\r\n     * @param PoolAddress address of the pool\r\n     * @param PoolName name of the pool\r\n     * @param BrandName name of the brand running the campaign\r\n     * @param Winner the winning submission number\r\n     **/\r\n    event WinnerSelected(\r\n        address PoolAddress,\r\n        string PoolName,\r\n        string BrandName,\r\n        uint256 Winner\r\n        );\r\n\r\n    /**\r\n     * @dev emitted when a someone calls cashout\r\n     * @param PoolAddress address of the pool\r\n     * @param PoolName name of the pool\r\n     * @param BrandName name of the brand running the campaign\r\n     * @param SubmissionNumber the submission number the fan voted for\r\n     * @param Caller the address of the caller who cashed out\r\n     **/\r\n    event CashedOut(\r\n        address PoolAddress,\r\n        string PoolName,\r\n        string BrandName,\r\n        uint256 SubmissionNumber,\r\n        address Caller\r\n    );\r\n\r\n    //TODO add in event for when settling contract is created\r\n\r\n    /**\r\n     * @dev functions affected by this modifier can only be called by the pool owner\r\n     **/\r\n    modifier onlyPoolOwner() {\r\n        require(\r\n            msg.sender == poolOwner,\r\n            \"Only the Pool Owner can call this function!\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev functions affected by this modifier can only be called by fans\r\n     **/\r\n    modifier onlyFans() {\r\n        require(msg.sender != poolOwner, \"Only Fans can call this function!\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev functions affected by this modifier are onyl callable\r\n     * when the pool has been backed by funds\r\n     **/\r\n    modifier checkFunds() {\r\n        require(backedByFunds, \"Pool is not backed by funds!\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        string memory _poolName,\r\n        string memory _brandName,\r\n        uint256 _capital,\r\n        address _capitalAddress,\r\n        address _nftAddress,\r\n        address _poolOwner,\r\n        address _rng,\r\n        uint256 _campaignLength,\r\n        uint256 _votingLength,\r\n        uint256 _decisionLength,\r\n        uint256 _submissionLength\r\n    ) {\r\n        poolOwner = _poolOwner;\r\n        funds = _capital;\r\n        token = IERC20(_capitalAddress);\r\n\r\n        userDeposit = funds / 10;\r\n        nft = IERC721(_nftAddress);\r\n        rng = iRandomNumberGenerator(_rng);\r\n\r\n        poolName = _poolName;\r\n        brandName = _brandName;\r\n        uint256 currentTime = block.timestamp;\r\n        submissionEndTime = currentTime + _submissionLength;\r\n        fanVotingEndTime = submissionEndTime + _votingLength;\r\n        brandVotingEndTime = fanVotingEndTime + _decisionLength;\r\n        campaignEndTime = currentTime + _campaignLength;\r\n    }\r\n\r\n    function getName() external view returns (string memory) {\r\n        return poolName;\r\n    }\r\n\r\n    /**\r\n     * @dev After a pool is created, the owner needs to transfer the funds to the pool in order to back it\r\n     **/\r\n    function backPool() external onlyPoolOwner {\r\n        require(!backedByFunds, \"Pool already backed by funds!\");\r\n        require(\r\n            token.transferFrom(msg.sender, address(this), funds),\r\n            \"trandferFrom failed, pool not backed by funds!\"\r\n        );\r\n        backedByFunds = true;\r\n        emit PoolBacked(address(this), poolName, brandName, backedByFunds);\r\n    }\r\n\r\n    function changeName(string memory _name) external onlyPoolOwner {\r\n        poolName = _name;\r\n        emit PoolNameChanged(address(this), poolName, brandName);\r\n    }\r\n\r\n    function seePoolBacking() external view returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    function getTopTen() external view returns (uint256[10] memory) {\r\n        return topTen;\r\n    }\r\n\r\n    function getTopTenAmount() external view returns (uint256[10] memory) {\r\n        return topTenAmount;\r\n    }\r\n\r\n    function getfinalists() external view returns (uint256[] memory) {\r\n        return finalists;\r\n    }\r\n\r\n    function getfinalistsAmount() external view returns (uint256[] memory) {\r\n        return finalistsAmounts;\r\n    }\r\n\r\n    /**\r\n     * @dev allow artists to create submissions\r\n     * Require artist to transfer userDeposit, and to transfer NFTs\r\n     * @param nfts Array of 3 nfts to transfer to the contract\r\n     **/\r\n    function createSubmission(uint256[3] memory nfts) external checkFunds {\r\n        require(\r\n            block.timestamp < submissionEndTime,\r\n            \"Can not add submissions during the fan voting period\"\r\n        );\r\n        require(\r\n            token.transferFrom(msg.sender, address(this), userDeposit),\r\n            \"trandferFrom failed, submission not backed by funds!\"\r\n        );\r\n        for (uint256 i = 0; i < 3; i++) {\r\n            nft.transferFrom(msg.sender, address(this), nfts[i]); //Transfer them to the contract Think we need to do a require, we could require the nft owner is the conrtact?\r\n            submissions[submissionCount].nftList.push(nfts[i]);\r\n        }\r\n        User memory artist = User({user: msg.sender, amount: userDeposit});\r\n        submissions[submissionCount].userIndex[msg.sender] = 0; //Set artist as the 0 index\r\n        submissions[submissionCount].userCount++;\r\n        submissions[submissionCount].users.push(artist);\r\n        emit SubmissionCreated(address(this), poolName, brandName, submissionCount, msg.sender, nfts);\r\n        submissionCount++;\r\n    }\r\n\r\n    /**\r\n     * @dev allow fans to vote on submissions\r\n     * Require caller transfers userDeposit to contract\r\n     * @param _submissionNumber the number of the submission the fan wants to vote for\r\n     **/\r\n    function fanVote(uint256 _submissionNumber) external onlyFans checkFunds {\r\n        //TODO I think its okay to read the zero address of an empty array, I am assuming it returns zero but I need to verify this!\r\n        require(\r\n            msg.sender != submissions[_submissionNumber].users[0].user,\r\n            \"Artist can not vote for their own submission!\"\r\n        );\r\n        require(\r\n            block.timestamp >= submissionEndTime,\r\n            \"Can not start voting until submission period is over!\"\r\n        );\r\n        require(\r\n            block.timestamp <= brandVotingEndTime,\r\n            \"Fan Voting Period is Over!\"\r\n        );\r\n        require(\r\n            submissions[_submissionNumber].nftList[0] > 0,\r\n            \"There are no NFTs in this submission!\"\r\n        );\r\n        require(\r\n            token.transferFrom(msg.sender, address(this), userDeposit),\r\n            \"trandferFrom failed, vote not backed by funds!\"\r\n        );\r\n\r\n        //Check if the user is already in the submission and thorw an error if they are!\r\n        for (uint256 i = 1; i < submissions[_submissionNumber].userCount; i++) {\r\n            if (msg.sender == submissions[_submissionNumber].users[i].user) {\r\n                require(false, \"User has already voted for this submission!\");\r\n            }\r\n        }\r\n        // If user isn't in the submission, then add them!\r\n        User memory fan = User({user: msg.sender, amount: userDeposit});\r\n        submissions[_submissionNumber].users.push(fan);\r\n        submissions[_submissionNumber].userCount++;\r\n\r\n        //Calculate submission vote count\r\n        uint256 votes =\r\n            (submissions[_submissionNumber].userCount - 1) * userDeposit;\r\n\r\n        //Find topten submission with least amount of votes\r\n        uint256 smallStake = topTenAmount[0];\r\n        uint256 indexSmall = 0;\r\n        for (uint256 i = 0; i < 10; i++) {\r\n            if (topTenAmount[i] < smallStake) {\r\n                smallStake = topTenAmount[i];\r\n                indexSmall = i;\r\n            }\r\n        }\r\n\r\n        //Check if the submission is already in the top ten\r\n        bool alreadyInTopTen = false;\r\n        for (uint256 i = 0; i < 10; i++) {\r\n            if (topTen[i] == _submissionNumber) {\r\n                alreadyInTopTen = true;\r\n                topTenAmount[i] = votes;\r\n                break;\r\n            }\r\n        }\r\n\r\n        //Check if this submissions vote count is greater than the smallest. If it is replace it\r\n        if (!alreadyInTopTen && (votes > topTenAmount[indexSmall])) {\r\n            topTenAmount[indexSmall] = votes;\r\n            topTen[indexSmall] = _submissionNumber;\r\n            emit NewTopTen(address(this), poolName, brandName, topTen);\r\n        }\r\n\r\n        emit VoteSubmitted(address(this), poolName, brandName, _submissionNumber, msg.sender, votes);\r\n    }\r\n\r\n    /**\r\n     * @dev Function scans through top ten list, and finds entry with lowest vote count\r\n     * then function scans through all submissions and if it finds a submission with\r\n     * an equal vote count to the lowest in the top ten, it adds it to the finalist\r\n     * array.\r\n     * Function also adds top ten list to the finalists array\r\n     * Function also pings RNG contract to generate a new random number for when\r\n     * selectWinner is called\r\n     * ***WARNING unbounded for loop when looking through submissions!!!***\r\n     * Might want to add a hard cap on submissions to avoid this.\r\n     **/\r\n    function checkForTies() external onlyPoolOwner {\r\n        require(\r\n            block.timestamp > fanVotingEndTime,\r\n            \"Cannot select top ten until fan voting is over!\"\r\n        );\r\n        require(block.timestamp < campaignEndTime, \"Decision period is over!\");\r\n        require(!checkedForTies, \"Already checked for ties\");\r\n\r\n        uint256 smallStake = topTenAmount[0];\r\n        uint256 indexSmall = 0;\r\n        for (uint256 i = 0; i < 10; i++) {\r\n            finalists.push(topTen[i]);\r\n            finalistsAmounts.push(topTenAmount[i]);\r\n            finalistsCount++;\r\n            if (topTenAmount[i] < smallStake) {\r\n                smallStake = topTenAmount[i];\r\n                indexSmall = i;\r\n            }\r\n        }\r\n        uint256 tmpAmount;\r\n        bool inTopTen;\r\n        for (uint256 i = 1; i < submissionCount; i++) {\r\n            tmpAmount = (submissions[i].userCount - 1) * userDeposit;\r\n            if (smallStake == tmpAmount) {\r\n                inTopTen = false;\r\n                for (uint256 j = 0; j < 10; j++) {\r\n                    //Only want to check if it is in the first top ten, don't need to go through all finalists!\r\n                    if (finalists[j] == i) {\r\n                        inTopTen = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!inTopTen) {\r\n                    finalists.push(i);\r\n                    finalistsAmounts.push(tmpAmount);\r\n                    finalistsCount++;\r\n                }\r\n            }\r\n        }\r\n        checkedForTies = true;\r\n        rng.getRandomNumber(block.timestamp);\r\n        emit SeeFinalists(address(this), poolName, brandName, finalists);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to choose the winning submission, create a settling contract, and choose a lucky fan\r\n     * @param submissionIndex index of the winning submission\r\n     * TODO Remove reward distribution and instead create a settling contract\r\n     **/\r\n    function selectWinner(uint256 submissionIndex) external onlyPoolOwner {\r\n        require(!winnerSelected, \"Already selected winner!\");\r\n        require(\r\n            block.timestamp > campaignEndTime,\r\n            \"Can only choose a winner after the campaign is over!\"\r\n        );\r\n        require(checkedForTies, \"You have to call checkForTies first!\");\r\n        winnerSelected = true;\r\n        bool winnerInTopTen;\r\n        for (uint256 i = 0; i < finalistsCount; i++) {\r\n            if (submissionIndex == finalists[i]) {\r\n                winnerInTopTen = true;\r\n                break;\r\n            }\r\n        }\r\n        require(\r\n            winnerInTopTen,\r\n            \"You must select a winner from the top ten list!\"\r\n        );\r\n        winningSubmission = submissionIndex;\r\n        //distribute awards\r\n        /*\r\n        nft.transferFrom(\r\n            address(this),\r\n            submissions[winningSubmission].users[0].user,\r\n            submissions[winningSubmission].nftList[0]\r\n        );\r\n        uint256 winnerIndex =\r\n            (rng.seeRandomNumber() %\r\n                (submissions[submissionIndex].userCount - 1)) + 1;\r\n        address luckyFan = submissions[submissionIndex].users[winnerIndex].user;\r\n        nft.transferFrom(\r\n            address(this),\r\n            luckyFan,\r\n            submissions[winningSubmission].nftList[1]\r\n        );\r\n        nft.transferFrom(\r\n            address(this),\r\n            poolOwner,\r\n            submissions[winningSubmission].nftList[2]\r\n        );\r\n        token.transfer(poolOwner, funds);\r\n        */\r\n        emit WinnerSelected(address(this), poolName, brandName, winningSubmission);\r\n    }\r\n\r\n    /**\r\n     * @dev Function allows artists and fans to cashout from their submissions\r\n     **/\r\n    function cashout(uint256 _submissionNumber) external {\r\n        require(\r\n            block.timestamp > campaignEndTime,\r\n            \"Can not cashout until campaign is over!\"\r\n        );\r\n        require(\r\n            msg.sender != poolOwner,\r\n            \"Pool Owner must cashout via settling contract\"\r\n        );\r\n        require(_submissionNumber != 0, \"There is no zero submission!\");\r\n        bool userFound;\r\n        uint256 index;\r\n        for (uint256 i = 0; i < submissions[_submissionNumber].userCount; i++) {\r\n            if (submissions[_submissionNumber].users[i].user == msg.sender) {\r\n                userFound = true;\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n        uint256 tmpBal = submissions[_submissionNumber].users[index].amount;\r\n        submissions[_submissionNumber].users[index].amount = 0;\r\n        if (userFound && index == 0) {\r\n            //This is an artist that needs to withdraw funds and NFTS\r\n            //Send back their NFTs if they arent the winner, and their funds. If they are the winner then just send back the funds\r\n            require(token.transfer(msg.sender, tmpBal));\r\n            if (_submissionNumber != winningSubmission) {\r\n                for (uint256 i = 0; i < 3; i++) {\r\n                    nft.transferFrom(\r\n                        address(this),\r\n                        msg.sender,\r\n                        submissions[_submissionNumber].nftList[i]\r\n                    ); //Transfer them to the contract Think we need to do a require, we could require the nft owner is the conrtact?\r\n                }\r\n                submissions[_submissionNumber].nftList = [0, 0, 0]; //Set the nftList equal to a list of zeroes\r\n            }\r\n        } else if (userFound) {\r\n            //This is a fan that just needs their tokens back\r\n            require(token.transfer(msg.sender, tmpBal));\r\n        } else {\r\n            require(false, \"User was not found in submission!\");\r\n        }\r\n        emit CashedOut(address(this), poolName, brandName, _submissionNumber, msg.sender);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping (uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping (address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping (uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC721).interfaceId\n            || interfaceId == type(IERC721Metadata).interfaceId\n            || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\n            : '';\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\n     * in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\n        _mint(to, tokenId);\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n        private returns (bool)\n    {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver(to).onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    // solhint-disable-next-line no-inline-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant alphabet = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = alphabet[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "contracts/MockERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\n\r\ncontract MockNFT is ERC721 {\r\n    constructor(address addr1, address addr2, address addr3) ERC721(\"Mock NFT\", \"MOCK\"){\r\n        for (uint i=1; i<4; i++){\r\n            _safeMint(addr1, i);\r\n            _safeMint(addr2, i+3);\r\n            _safeMint(addr3, i+6);\r\n        }\r\n        for (uint i=11; i<14; i++){\r\n            _safeMint(addr1, i);\r\n            _safeMint(addr2, i+3);\r\n            _safeMint(addr3, i+6);\r\n        }\r\n        for (uint i=21; i<24; i++){\r\n            _safeMint(addr1, i);\r\n            _safeMint(addr2, i+3);\r\n            _safeMint(addr3, i+6);\r\n        }\r\n        for (uint i=31; i<34; i++){\r\n            _safeMint(addr1, i);\r\n            _safeMint(addr2, i+3);\r\n            _safeMint(addr3, i+6);\r\n        }\r\n    }\r\n}"
    },
    "contracts/mockRNG.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract mockRNG is Ownable{\r\n    uint public number;\r\n    address[] whitelist;\r\n    uint whitelistCount;\r\n\r\n    constructor(){}\r\n\r\n    function getRandomNumber(uint seed) external returns(bytes32 requestId){\r\n        number = seed;\r\n        return \"testId\";\r\n    }\r\n\r\n    function seeRandomNumber() external view returns(uint){\r\n        return number;\r\n    }\r\n\r\n    function addToWhitelist(address _address) external onlyOwner{\r\n        whitelist.push(_address);\r\n        whitelistCount++;\r\n    }\r\n}"
    },
    "contracts/mockCRTV.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract mockCRTV is ERC20 {\r\n    \r\n    constructor() ERC20(\"MOCK Creative Token\", \"mCRTV\") {}\r\n\r\n    function mintMeTokens(uint _amount) external returns(bool){\r\n        _mint(msg.sender, _amount);\r\n        return true;\r\n    }\r\n\r\n    function burn(uint _amount) external returns(bool){\r\n        _burn(msg.sender, _amount);\r\n        return true;\r\n    }\r\n}"
    },
    "contracts/CRTVtoken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract CRTVtoken is ERC20 {\r\n    \r\n    constructor() ERC20(\"Creative Token\", \"CRTV\") { \r\n        _mint(msg.sender, 980 * 10^7 );\r\n    }\r\n\r\n    function burn(uint _amount) external returns(bool){\r\n        _burn(msg.sender, _amount);\r\n        return true;\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}